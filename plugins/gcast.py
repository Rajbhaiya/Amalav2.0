import asyncio
from pyrogram import Client, filters
from pyrogram.types import Dialog, Chat, Message
from pyrogram.errors import UserAlreadyParticipant
from modules.clientbot.clientbot import Bot
from modules.config import SUDO_USERS

@Client.on_message(filters.command(["bcast"]))
async def bcast(_, message: Message):
    sent=0
    failed=0
    if message.from_user.id not in SUDO_USERS:
        return
    else:
        wtf = await message.reply("** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™s s·¥õ·¥Ä Ä·¥õ…™…¥…¢ üíû...**")
        if not message.reply_to_message:
            await wtf.edit("**·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á üòí**")
            return
        lmao = message.reply_to_message.text
        async for dialog in Bot.iter_dialogs():
            try:
                await Bot.send_message(dialog.chat.id, lmao)
                sent = sent+1
                await wtf.edit(f"** ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢** \n\n**s·¥á…¥·¥õ …¢ Ä·¥è·¥ú·¥òs:** `{sent}` ∆á…¶…ë·¥õs \n**“ì…ë…©…≠…ò…ó …™≈ã:** {failed} ·¥Ñ ú·¥Ä·¥õs")
                await asyncio.sleep(2)
            except:
                failed=failed+1
        await message.reply_text(f"` ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü` \n\n**s…ò≈ã·¥õ ∆¨√∏:** `{sent}` ∆á…¶…ë·¥õs \n**“ì…ë…©…≠…ò…ó …™≈ã:** {failed} ∆á…¶…ë·¥õs")
